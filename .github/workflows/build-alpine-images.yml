name: Build Alpine-based Asterisk images

on:
  workflow_call:
    inputs:
      docker-tags:
        required: true
        type: string
    secrets:
      dockerhub_username:
        required: true
      dockerhub_token:
        required: true


jobs:
  build-images:
    name: Build Alpine-based Asterisk images
    runs-on: ubuntu-latest
    timeout-minutes: 600
    strategy:
      max-parallel: 64
      fail-fast: false
      matrix: ${{ fromJson(inputs.docker-tags) }}

    steps:
      - uses: actions/checkout@v3

      - name: Login to the docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}

      - name: Create docker buildx instance
        id: buildx
        shell: bash
        run: |
          set -ueox pipefail
          echo "::set-output name=value::$(docker buildx create)"

      - name: Generate docker image
        shell: bash
        run: |
          set -ueox pipefail

          cd ./alpine

          BUILDX="${{ steps.buildx.outputs.value }}"

          BASEIMAGE_TAG="${{ matrix.run }}"

          if [[ "$BASEIMAGE_TAG" =~ ^alpine: ]]; then
            # alpine:3.12
            TAG_PREFIX="alpine-"
            TAG="${TAG_PREFIX}$(echo -n "${BASEIMAGE_TAG}" | awk -F ':' '{print $NF}')"
          else
            # frolvlad/alpine-glibc:latest
            TAG_PREFIX="alpine-glibc-"
            TAG="${TAG_PREFIX}$(echo -n "${BASEIMAGE_TAG}" | awk -F '-' '{print $NF}')"
          fi

          IMAGE="andrius/asterisk:${TAG}"

          erb -U docker_baseimage="${BASEIMAGE_TAG}" ./Dockerfile.erb > "./Dockerfile-${TAG}"

          BUILDX_PLATFORMS="$(
            docker buildx imagetools inspect "${BASEIMAGE_TAG}" \
            | grep 'Platform:' \
            | awk '{print $NF}' \
            | grep 'amd64\|arm\|386' \
            | xargs \
            | sed -e "s/ /,/g"
          )"
          [ "${BUILDX_PLATFORMS}" != "" ] && BUILDX_PLATFORMS="--platform ${BUILDX_PLATFORMS}"

          if docker build --quiet --pull --tag "${IMAGE}" --file "Dockerfile-${TAG}" . ; then
            CONTAINER_NAME="$(date +%s | sha256sum | base64 | head -c 32 ; echo)"
            docker run --detach --name "${CONTAINER_NAME}" "${IMAGE}"
            sleep 5s
            if ASTERISK_VERSION="$(docker exec -i "${CONTAINER_NAME}" asterisk -V 2>&1 | awk '{print $NF}')"; then
              docker rm --force --volumes "${CONTAINER_NAME}"
              docker rmi --force "${IMAGE}"

              # additional tags
              TAGS="--tag andrius/asterisk:${TAG_PREFIX}${ASTERISK_VERSION}"
              TAGS+=" --tag andrius/asterisk:${TAG}-${ASTERISK_VERSION}"

              docker buildx use "${BUILDX}"
              docker buildx build ${BUILDX_PLATFORMS} --quiet --push --pull ${TAGS} --file "Dockerfile-${TAG}" .
              docker buildx prune --all --force
            fi
          fi

          docker rmi --force "${IMAGE}"
          rm "Dockerfile-${TAG}"

      - name: Remove docker buildx instance
        if: ${{ always() }}
        shell: bash
        run: |
          set -ueox pipefail
          BUILDX="${{ steps.buildx.outputs.value }}"
          [ "${BUILDX}" != "" ] && docker buildx rm "${BUILDX}"
