name: Build every Asterisk PBX version

on: push

jobs:
  asterisk-versions:
    runs-on: ubuntu-latest
    outputs:
       matrix: ${{ steps.setmatrix.outputs.matrix }}

    steps:
      - name: Set Dynamic Matrix
        id: setmatrix
        shell: bash
        run: |
          set -ueox pipefail

          URLS=( \
            http://downloads.asterisk.org/pub/telephony/asterisk/releases/ \
            http://downloads.asterisk.org/pub/telephony/asterisk/ \
            http://downloads.asterisk.org/pub/telephony/asterisk/old-releases/ \
            http://downloads.asterisk.org/pub/telephony/certified-asterisk/ \
            http://downloads.asterisk.org/pub/telephony/certified-asterisk/releases/ \
          )

          ASTERISK_VERSIONS=""

          for URL in "${URLS[@]}"; do
            _ASTERISK_VERSIONS="$( \
              curl -sL "${URL}" \
              | grep '<a href="asterisk.*.tar.gz">' \
              | grep -v '\-patch\|\-addons\|\-sounds' \
              | awk -F '</td><td>|">asterisk' '{print $2}' \
              | awk -F '"' '{print $NF}' \
              | awk -F '.tar.gz' '{print $1}' \
            )"
            ASTERISK_VERSIONS="$(echo -e "\n${ASTERISK_VERSIONS}\n${_ASTERISK_VERSIONS}")"
          done

          ASTERISK_VERSIONS="$(echo -e "${ASTERISK_VERSIONS}" | sort -u | xargs)"

          # JSON_MATRIX="{\"include\":[{\"run\":\"run1\"},{\"run\":\"run2\"}]}"
          # echo "::set-output name=matrix::${JSON_MATRIX}"
          JSON_MATRIX="$(echo -n "${ASTERISK_VERSIONS}" | jq --slurp -c -R 'split(" ") | map({run: .}) | {include: .}')"
          echo "::set-output name=matrix::${JSON_MATRIX}"

  build:
    needs: asterisk-versions
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.asterisk-versions.outputs.matrix) }}

    steps:
    - run: echo Run ${{ matrix.run }}
    - run: date
    - run: sleep 1
    - run: date
